<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>06-08-清晨杂想</title>
    <url>/2020/06/09/06-08-%E6%B8%85%E6%99%A8%E6%9D%82%E6%83%B3/</url>
    <content><![CDATA[<h1 id="6月9日-来自清晨的回想"><a href="#6月9日-来自清晨的回想" class="headerlink" title="6月9日-来自清晨的回想"></a>6月9日-来自清晨的回想</h1><h2 id="心比天高，命比纸薄"><a href="#心比天高，命比纸薄" class="headerlink" title="心比天高，命比纸薄"></a>心比天高，命比纸薄</h2><p>昨晚又有些着相了，不知为何，可能是很多事情堆叠的压力吧，自己无意中没有hold住，这泄露的微毫的压力默默影响了我，还好今早起来回味过来了。我一旦感受到沉重的压力，不是直接颓废躺倒，就是反常的自负自大，眼高手低。希望通过每日写些什么，逐渐摆脱这种情况吧。</p>
<h2 id="todo-list"><a href="#todo-list" class="headerlink" title="todo-list"></a>todo-list</h2><ul>
<li><p>comp9101-ass1<br>昨天把question1-question3都写完了，question5写了第一小题，question4还没有好的思路，q5剩下俩就是数学问题了，可能够呛了。其中question1-b的改进算法使用了hash的思想，自己当时也未回想起来，知道晚上刷题，又刷到一个使用hash的题才才想起来，自己对于hash的认知太过于浅薄了。想了想，可能跟python有关吧，我一直把hash与dict绑定，这是非常不对的，片面的。</p>
</li>
<li><p>comp9900-ER图<br>昨晚讨论之后我们便分头行动了，作为后端写手，分配了ER图的任务。结束之后，去google了一下，毕竟全都忘掉了，不过还好，没有全忘掉。但是结合我们的任务要求来看，我的初版ER图有些简单啊，感觉得花时间好好看一下，当然了，也有可能真的不是很复杂：）～</p>
</li>
<li><p>刷题<br>其实这学期零散时间还是很多的，争取多刷题吧。昨晚刷了一道输出第一个重复数字的题，这其中用到了hash。题本身是不太难得，但这道题可以扩展很多。第一个重复数字，也可以改成第一个不重复的数字，甚至不是数字，字符也可以。但是字符的256位我没抬搞明白……剩下的就写在剑指那页吧。</p>
</li>
</ul>
<h2 id="面朝大海，春暖花开～"><a href="#面朝大海，春暖花开～" class="headerlink" title="面朝大海，春暖花开～"></a>面朝大海，春暖花开～</h2>]]></content>
      <categories>
        <category>发骚</category>
      </categories>
      <tags>
        <tag>杂记</tag>
        <tag>todolist</tag>
      </tags>
  </entry>
  <entry>
    <title>06-08</title>
    <url>/2020/06/08/06-08/</url>
    <content><![CDATA[<h1 id="随随便便"><a href="#随随便便" class="headerlink" title="随随便便"></a>随随便便</h1><h3 id="comp9101-assignrmnt1"><a href="#comp9101-assignrmnt1" class="headerlink" title="comp9101-assignrmnt1"></a>comp9101-assignrmnt1</h3><p>&emsp; 又颓废了两天，今天正好也是周一，恢复正常吧<br>comp9101的assignemtn1有点小难啊，还有给了hints，再结合网上查阅的资料，总算完成了大部分。自我感觉算法这一块需要好好补一补缺漏了。这个assignemnt用到了多次排序算法的分析，还有分治的思路。最蛋疼的还是数学吧，求导换底之类的都忘的差不多了，不过本身水平也不咋地…………<br>&emsp; 然后就是latex，不得不说自从上学期多次使用之后已经爱上了这个东西，word，算个捷豹！latex写公式和伪代码是真的舒服，看起来也很舒爽。不过写blog用的是markdown，有时候容易记混了，导致自己觉得写出来了，但是渲染不出来…………</p>
<h3 id="comp9900"><a href="#comp9900" class="headerlink" title="comp9900"></a>comp9900</h3><p>&emsp; 这周就得把proposal的核心内容搞出来，像system flow之类的，下周再扣扣细节就交了。之后就是代码实现了，希望自己的表现不要太糟糕。</p>
<h3 id="leetcode"><a href="#leetcode" class="headerlink" title="leetcode"></a>leetcode</h3><p>&emsp; 以后关于算法题的内容我应该都会叫leetcode吧，简单直接。其实周末还是默默增增的看了俩题的，不过都是简单的题，接下来就得好好对待一下了，认真分析题目，尝试 free-bug…………就当在想peach吧，分析题目这个真的很重要，每次看待讨论区的大神们真的惊呼卧槽！尤其是上次那道贪心算法的题，大神分析过后就感觉简单的一匹！</p>
<p><strong>着眼当下，踏实前进！</strong></p>
]]></content>
      <categories>
        <category>发骚</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>06-17</title>
    <url>/2020/06/17/06-17/</url>
    <content><![CDATA[<h1 id="6月17日"><a href="#6月17日" class="headerlink" title="6月17日"></a>6月17日</h1><blockquote>
<p>有几日未更新了，不得不说有些松懈了，玩了两天war3的rpg……。不得不说，年纪大了，其实不太喜欢新的游戏里，就只能玩玩rpg了……。</p>
</blockquote>
<p>这两天也大事频出，北京的新一轮爆发让人始料未及，再加上阿三挑事，不过还好，小丑们跳来跳去，以为天下大乱，其实我自岿然不动。他强任他强，清风拂山岗。随你怎么来，这边自有人借着。</p>
<p>今天从youtube上白嫖了一个利用google api的图书搜索模块，之前预定的是使用kaggle上找的数据集，但是有些信息缺失，比如catogories，还有图片，我们不太肯呢个根据图书一个一个去搜罗图片，太蠢了……。</p>
<p>目前已经集成到后端了，测试没什么大问题，就是css有些问题，不过都是小事。</p>
<p>周一下午把开始陆陆续续做点东西，到现在总算是把登录，注册和搜索做完了。接下来就是要思考collections和users以及book的关系，我感觉我之前想的简单了，希望赶紧理出个头绪吧。</p>
<p>这周还要把proposal弄完，但是不得不说由于经验阅历的原因，我们最开始规划的system flow必然会与我们最终的产物有些不同。</p>
<p>这周9101的新作业也没下来，ass1在明神和郝神的带领下总算是弄完了。</p>
<p>这周刷题就刷了一道吧，就是树的左右子树反转。</p>
<p>接下来就是写完proposal，刷题！！！！然后再尝试完成collection模块吧。</p>
<p>分享一下古剑奇谭3的结尾的诗，来激励一下自己吧。</p>
<blockquote>
<p>天道作何，<br>吞恨者多。<br>千秋竞岁，<br>伏苦飞逐。<br>昆仑有玉，<br>以为兵戈。<br>山海遥阔，<br>万世奋飞。</p>
</blockquote>
]]></content>
      <categories>
        <category>发骚</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>06-11杂记</title>
    <url>/2020/06/11/06-11%E6%9D%82%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="6月11日–随便说点啥"><a href="#6月11日–随便说点啥" class="headerlink" title="6月11日–随便说点啥"></a>6月11日–随便说点啥</h1><p>今天又是颓废的一天，下午才打算做点什么，可能是前两天太累了，疯狂写东西。<br>然后就是把算法和算法题分开，把算法单独写一章，例如归并排序，二分算法等，<br>leetcode或者剑指上面一般都是算法的变种，在一些算法的细节上添加元素。</p>
<p>然后就是顺阳大佬说的评论问题，我看了看好像也没啥，再研究一下吧。</p>
<p>今天得把皮尔森算法搞完，毕竟推荐系统得靠这个…………</p>
<p>刷题，9101，django……</p>
<p>如果有时间，就先建个user的数据模型吧，算是9900的第一步吧。</p>
<blockquote>
<p><em>长风破浪会有时，直挂云帆济沧海</em></p>
</blockquote>
]]></content>
      <categories>
        <category>发骚</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>06-13</title>
    <url>/2020/06/13/06-13/</url>
    <content><![CDATA[<h1 id="6月13日-宁做太平犬，不做乱世人"><a href="#6月13日-宁做太平犬，不做乱世人" class="headerlink" title="6月13日-宁做太平犬，不做乱世人"></a>6月13日-宁做太平犬，不做乱世人</h1><p>本来就颓废了周四一日，结果周五一觉起来，头疼的厉害，不得不又划了一天，不过还是把proposal的任务分配完了。顺便也看了看相似度算法的大概，不看不知道，一看吓一跳，里面的门道确实颇多啊。</p>
<p>本来今日打算好好啃一啃相似算法，再把9101彻底弄完交了，结果早上醒来，新发地突发疫情，搞的自己是心神不宁，毕竟父母与好友都在北京，父母年岁也越发的大了，倘若真的染上了，也不知扛得住扛不住。人啊，毕竟还是自私的动物，尤其是涉及到自己家庭的时候。</p>
<p>当然了，这个时候还是要听从组织指挥，这个不是嘲讽，而是事实，个体在巨大灾祸面前风险的承担能力几乎为0，但是群体就不一样了。希望赶紧追本溯源，找到源头，控制住。</p>
<p>不得不说，在这次疫情当中，大数据与物联网发挥了极大的作用，定位与追查，这也是未来的趋势。有些方面的实施交给计算机来做，可以一定程度的避免人为的错误，其实我之前也对计算机与人的操作的认知有些不全面，后来跟赫爷一起去泰国的时候聊过这个问题，就是飞机的飞控与人哪个更能防止操作失误，后来我也意识到了，这些失误不就是人弄出来的吗，只要我们在写飞控的时候考虑全面，的确比人更能减少失误。</p>
<p>其实政府的政务也是如此，填表填表填表……填表本身没有问题，这就是个信息的简单集中处理，但是这个过程重复性替代性太高了，而且人为失误也比较多。明明可以出一个办公系统，自动过滤填写内容，后台系统自动计数统计。这都会比人为处理要更快更准确，其中的可操作性也就更低了。</p>
<p>说的有些杂七杂八的，主要还是心乱了，随便写点东西让心静一静吧。</p>
<blockquote>
<p><em>二十一世纪是<s>生物</s>信息的世纪！！</em></p>
</blockquote>
]]></content>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>06-18 凌晨的反思</title>
    <url>/2020/06/18/06-18-%E5%87%8C%E6%99%A8%E7%9A%84%E5%8F%8D%E6%80%9D/</url>
    <content><![CDATA[<h1 id="深夜的确适合思考"><a href="#深夜的确适合思考" class="headerlink" title="深夜的确适合思考"></a>深夜的确适合思考</h1><blockquote>
<p>下午通过参考youtube的一个视频，把Google book api成功完善了，非常高兴，并且后面集成到Django的模版里也很顺利。</p>
</blockquote>
<p>顺利会给人带来喜悦，也会让人飘飘然不知所踪。通过bootstrap快速搭建了一些后台页面，例如login和register，search功能真的有些飘了。之后自己也开始反思，bootstr这么简单，前端还有什么用，果然细思之后就觉得不太对劲，google多次之后，的确是自己飘了。目前为止自己对于前后端分离的认知太过于浅显，主要还是经验太少，没有一个高屋建瓴的整体认知，后面抽空把vue-cli好好看看，以及国内pc主流的vue ui- elemen ui.</p>
<p>也希望此事给自己敲响一个警钟，倘若世间种种都是如此简单，自己为何还是如此处境呢？</p>
]]></content>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>Django之初见</title>
    <url>/2020/06/09/Django%E4%B9%8B%E5%88%9D%E8%A7%81/</url>
    <content><![CDATA[<h1 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h1><p>花了一天半把django官网的实例做了一遍，不得不说有些地方的确比flask舒服，如果真的是萌新，尤其是对任务框架不熟悉的却想做一个完整的web server，很推荐Django。flask的灵活也是相对的，有时候萌新真的无处下手，官网的教程跟Django的比起来差的太远了。但是熟悉了开发流程并有了一些经验后，不喜欢Django束缚的人，flask真的是非常好的框架了。<br>总之，各有千秋吧。</p>
<blockquote>
<p><strong>君子性非异也，善假于物也！</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>framework</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>07-01 一步一步往前爬</title>
    <url>/2020/07/01/07-01-%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%BE%80%E5%89%8D%E7%88%AC/</url>
    <content><![CDATA[<h1 id="南半球的冬天，阳光明媚"><a href="#南半球的冬天，阳光明媚" class="headerlink" title="南半球的冬天，阳光明媚"></a>南半球的冬天，阳光明媚</h1><blockquote>
<p>又是一日好天气，不过马上就又要变了，这世间哪有一成不变的东西。</p>
</blockquote>
<p>今天把 9900 的书库的增删查写完了，改忘了……，毕竟不如前几个。还把外建的序列化初步完成了，不得不说，自己还是看清了 Django，毕竟是个成熟的开发框架了，怎么可能轻易被人吃透。</p>
<p>下一步计划就是进一步完善 model，吧 book 和 review 写完，这样就只剩下推荐系统了。不过再次之前还得挑选一些数据填充数据库，这可是个体力活……</p>
<p>基本上快把剑指的二叉树部分刷完了，下面估计不是 dfs/bfs,就是贪心，或者动态规划，这些都是硬骨头啊，二叉树，链表比起这几个，感觉就像小玩闹。</p>
<p>昨天跟博为聊天，感觉就像两个巨婴在抱团取暖一样，哎……</p>
<p>这场世纪的大变局依然逐渐波及到个人了，不要有任何的侥幸心里，这是你死我亡的斗争，民族自当为明日一搏，渺小的个人也当一搏！</p>
]]></content>
      <tags>
        <tag>发骚</tag>
      </tags>
  </entry>
  <entry>
    <title>6月24日-这几天的总结</title>
    <url>/2020/06/24/6%E6%9C%8824%E6%97%A5-%E8%BF%99%E5%87%A0%E5%A4%A9%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="疯疯癫癫，又是一天"><a href="#疯疯癫癫，又是一天" class="headerlink" title="疯疯癫癫，又是一天"></a>疯疯癫癫，又是一天</h1><blockquote>
<p>好几天没更新了，的确有些忙，还有就是有点累了，越来越感觉无形的巨大的压力压在身上，喘不过气来，却又不能放弃……</p>
</blockquote>
<h2 id="轮子终究不是车，造好的轮子也不可能满足所有的需求"><a href="#轮子终究不是车，造好的轮子也不可能满足所有的需求" class="headerlink" title="轮子终究不是车，造好的轮子也不可能满足所有的需求"></a>轮子终究不是车，造好的轮子也不可能满足所有的需求</h2><p>这两天vue和django rest framework 双线操作，对于框架轮子又有了新的不同的认知。框架也只是满足大部分常用的需求，有些更加深入的需求或者新的需求还没有被整合进去。</p>
<h3 id="django-token-authority"><a href="#django-token-authority" class="headerlink" title="django-token authority"></a>django-token authority</h3><p>之所以抛弃flask使用Django，主要原因是database ORM 太香了，我本来sql就不怎么厉害，Django的数据库操作真的是相当便利。但是有利就有弊，或许也是我当时没有深入了解全部的功能吧，简而言之一句话，轮子不是万能的，轮子也只是轮子而已。</p>
<p>在web开发中，login已经用户的验证是首要的，网上找了很多，后来因为又决定要用token作为用户验证，现在也非常的流行，节省空间，也挺方便的。Django rest framework有专门用来进行token设定的。</p>
<p>1.全局注册</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSTALLED_APP &#123;</span><br><span class="line">  ...,</span><br><span class="line">  &#39;rest_framework.authtoken&#39;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">  &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;:[</span><br><span class="line">    &#39;rest_framework.authentication.TokenAuthentication&#39;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.给用户绑定token<br>基本就是使用Django自带的authtoken.model里的user来进行验证。<br>先把所有已经存储在数据库里的用户绑定token令牌。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~$ python3 manege.py shell</span><br><span class="line">from rest_framework.authtoken.models import Token</span><br><span class="line">token &#x3D; Token.objects.create(user&#x3D;....)</span><br></pre></td></tr></table></figure>
<p>自动生成token，在添加新用户自动绑定一个token。这段代码要写在model文件里</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.conf import settings</span><br><span class="line">from django.db.models.signals import post_save</span><br><span class="line">from django.dispatch import receiver</span><br><span class="line">from rest_framework.authtoken.models import Token</span><br><span class="line"></span><br><span class="line">@receiver(post_save, sender&#x3D;settings.AUTH_USER_MODEL)</span><br><span class="line">def create_auth_token(sender, instance&#x3D;None, created&#x3D;False, **kwargs):</span><br><span class="line">    if created:</span><br><span class="line">        Token.objects.create(user&#x3D;instance)</span><br></pre></td></tr></table></figure>

<p>3.路由地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from rest_framework.authtoken import views</span><br><span class="line">urlpatterns +&#x3D; [</span><br><span class="line">    url(r&#39;^api-token-auth&#x2F;&#39;, views.obtain_auth_token)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>这里的obtain_auth_token是Django rest framework自带的一个token验证视图，一般需求的话不需要自己在视图里再编辑了。<br>之后就可以使用postman进行尝试访问，成功就会返回一个token字符串。<br>如果用户不存在或者密码错误会返回400.</p>
<p>4.自定义视图<br>我们有时候非常需要准确的错误信息，而不是告诉我错了。就跟我这次写的一样，我想知道是用户不存在还是密码错了，这个时候我们就需要自定义token的验证视图了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from rest_framework.authtoken.views import ObtainAuthToken</span><br><span class="line">from rest_framework.authtoken.models import Token</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line">class CustomAuthToken(ObtainAuthToken):</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        serializer &#x3D; self.serializer_class(data&#x3D;request.data,</span><br><span class="line">                                           context&#x3D;&#123;&#39;request&#39;: request&#125;)</span><br><span class="line">        serializer.is_valid(raise_exception&#x3D;True)</span><br><span class="line">        user &#x3D; serializer.validated_data[&#39;user&#39;]</span><br><span class="line">        token, created &#x3D; Token.objects.get_or_create(user&#x3D;user)</span><br><span class="line">        return Response(&#123;</span><br><span class="line">            &#39;token&#39;: token.key,</span><br><span class="line">            &#39;user_id&#39;: user.pk,</span><br><span class="line">            &#39;email&#39;: user.email</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>
<p>这段代码是官方文档的，我们可以看到在最后的返回json里添加了user_id和email。比正常的返回多了。而我们可能需要在is_valid()这而外加判断语句，并且返回我们需要的信息。这里建议为力避免一些问题，最好不要用自带的errors之类的，没啥用，自己写一个data，再加上content-type和status，跟正确的返回保持一致。这样也方便前端识别status，然后进行接下来的操作。</p>
<h2 id="vue-cli-–-axios你为何不认错？"><a href="#vue-cli-–-axios你为何不认错？" class="headerlink" title="vue@cli – axios你为何不认错？"></a>vue@cli – axios你为何不认错？</h2><p>我昨天把前后端的login都写完后，就试了试正确的，没仔细试错误的。今天突然想试试，结果问题就暴露了。后端成功收到了vue发的axios，也成功返回了response，但是vue直接报错处理了，而不是我想的跟200一样的等着我去查看response里有啥。我真的是烦得要死，后来查了半天总算发现这是axios的响应过滤问题，我在封装axios到$http时并没有管error的处理，之后在main.js加上之后就好了，不过还有个error小红叉，之后再处理吧。<br>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; axios的响应拦截器，如果不设置的话会直接把400的返回直接报错，无法获取其中的关键信息</span><br><span class="line">axios.interceptors.response.use(res &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 对响应数据做些什么</span><br><span class="line">  return res</span><br><span class="line">&#125;, err &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 对响应错误做些什么</span><br><span class="line">  &#x2F;&#x2F; console.log(&#39;err&#39;, err.response) &#x2F;&#x2F; 修改后</span><br><span class="line">  return Promise.resolve(err.response)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>之后vue就不会直接把400的返回当做error直接报错了，我们就可以有针对性的筛选返回信息。</p>
]]></content>
      <tags>
        <tag>发骚</tag>
      </tags>
  </entry>
  <entry>
    <title>6月25日-清风拂山岗</title>
    <url>/2020/06/25/6%E6%9C%8825%E6%97%A5-%E6%B8%85%E9%A3%8E%E6%8B%82%E5%B1%B1%E5%B2%97/</url>
    <content><![CDATA[<h1 id="6月25日-困乏中还是要记录一下！"><a href="#6月25日-困乏中还是要记录一下！" class="headerlink" title="6月25日-困乏中还是要记录一下！"></a>6月25日-困乏中还是要记录一下！</h1><blockquote>
<p>他强任他强，清风拂山岗</p>
</blockquote>
<h2 id="django-重写auth-model"><a href="#django-重写auth-model" class="headerlink" title="django-重写auth model"></a>django-重写auth model</h2><p>原本是有django原生的user model做的login和register，但是register昨晚没有好好测试，今天测了之后发现问题很大，extend比较麻烦，还不如自己重写一个结构。<br>于是乎，谷歌加上官方文档，不得不说官方文档还是蛮详细的，这一点flask就做的不是很好。<br>具体细节就不多表述了，官网文档有完整的example。<br>但就是比照着写，自己还是有很多疏漏，少些个s真是个大问题，已经犯过很多次这样的错误了……。<br>为力防止对接出问题，又额外多写了一些属性。然后就是用postman测试，还好。<br>还有个关键点是注册成功后也是要按照登录成功一样，返回用户的token，因为之前写了自动生成token的代码，所以可以直接根据注册用户查到。这里会用到一个代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">token, created &#x3D; Token.objects.create_or_get(user&#x3D;user)</span><br></pre></td></tr></table></figure>
<p>这里要注意后面的user，这里的user其实是个object，就是我们定义的auth.usermodel。<br>我就用来比较笨的方法，save()之后，根据之前的username，找到object带入就可以了。</p>
<h2 id="axios-跨域以及异步"><a href="#axios-跨域以及异步" class="headerlink" title="axios-跨域以及异步"></a>axios-跨域以及异步</h2><p>整完了登录注册，就打算先把使用google book api的搜索页面用vue重构一下。<br>这就涉及到了另外一个问题，我是封装的axios，并且制定了baseURL，所以我之前封装好的axios就没法用了，于是从网上找了个简单的办法，重新封装了一个。其实有挺高明的办法，但是目前理解不能……<br>之后就是使用了，很简单的就成功获取了返回数据，但是是一个promise结构，这就很蛋疼了，看了看，我这就一个input，也不好写异步函数，也就只能用then了，还好没什么大问题。<br>再然后就是把结果展示在页面下方，原版的是用html拼接的，我原本也是打算这样写的，后来才意识到，我是在用vue啊。于是乎，在data()建了个空list用来存储获取的book info object。然后在template里面使用v-if和v-for。这里其实就跟flask和Django的模版渲染很像了，之前写了很多，也稍微熟练一点。顺理成章的，图片title都成功出现在了下方。基本上重构完成了大部分工作，接下来就是好好排版了。明天搞吧，困死了……</p>
<h2 id="what’s-next"><a href="#what’s-next" class="headerlink" title="what’s next?"></a>what’s next?</h2><p>明天估计就是把book和collection的model弄好，如果可以的话。还有就是9101，就写了一道题，赶紧把剩下的写完，这次基本都是大数算法的部分，得好好看看。</p>
<blockquote>
<p>正因为之前已经浪费了许多，之后便不能再浪费了，更加不可因为之前的颓废而丧失希望，往前走才能有机会。</p>
</blockquote>
]]></content>
      <tags>
        <tag>发骚</tag>
      </tags>
  </entry>
  <entry>
    <title>hello-hexo</title>
    <url>/2020/06/05/hello-hexo/</url>
    <content><![CDATA[<h2 id="新的开始"><a href="#新的开始" class="headerlink" title="新的开始"></a>新的开始</h2><p>&emsp;重新用hexo搭建了一个个人blog，感觉就清爽很多!</p>
<h3 id="by-the-way："><a href="#by-the-way：" class="headerlink" title="by the way："></a>by the way：</h3><p>把老的blog删掉的时候忘了备份了…………还好没写几天，后面把内容再补上吧</p>
]]></content>
      <categories>
        <category>初始</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>ER图</title>
    <url>/2020/06/08/ER%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="数据库之ER图"><a href="#数据库之ER图" class="headerlink" title="数据库之ER图"></a>数据库之ER图</h1><blockquote>
<p>前言：proposal需要做一个ER图，也算是对后端model建模的一个前期准备吧。顺便回顾一ER图的相关知识。</p>
</blockquote>
<p>ER图分为实体、属性、关系三个核心部分。实体是长方形的体现，而属性则是椭圆形，关系为棱形。</p>
<ul>
<li><p>ER图的实体（Entity）</p>
<blockquote>
<p>实体是数据模型中的数据对象，例如人、学生、音乐都可以作为一个数据对象，用长方体来表示，每个实体都有自己的实体成员（entity member）或者说实体对象（entity instance），例如学生实体中包括张三、李四等等，实体成员（entity member）/实体实例（entity instance）不需要出现在ER图中。</p>
</blockquote>
</li>
<li><p>ER图的属性（attribute）</p>
<blockquote>
<p>属性是数据对象所具有的属性，例如学生实体，具有姓名、性别、年龄、学号等属性，用椭圆形表示。属性分为唯一属性（unique attribute）和 非唯一属性，唯一属性是指唯一可用来标识该实体实例或者成员的属性，用下划线表示，一般来讲实体都至少有一个唯一属性。</p>
</blockquote>
</li>
<li><p>ER图的关系（relationship）</p>
<blockquote>
<p>关系用来表现数据对象与数据对象之间的联系，例如学生的实体与成绩表的实体之间有一定的联系，每个学生都有自己的成绩表，这就是一种关系，关系用菱形来表示。</p>
</blockquote>
</li>
</ul>
<p>ER图中关联关系有三种：</p>
<p>1.一对一（one to one）：</p>
<blockquote>
<p>一对一关系是指对于实体集A与实体集B，A中的每一个实体至多与B中一个实体有关系；反之，在实体B中的每个实体至多与实体集A中一个实体有关系。</p>
</blockquote>
<p>2.一对多（one to many）：</p>
<blockquote>
<p>一对多关系是指实体集合A与实体集合B中至少有N个（N&gt;0）个实体有关系；并且实体集合B中每一个实体至多与实体集合A中一个实体有关系。</p>
</blockquote>
<p>3.多对多（many to many）：</p>
<blockquote>
<p>多对多关系是指实体集合A中的每一个实体与实体集合B中至少有M(M&gt;0)个实体有关系，并且实体集合B中的每一个实体与实体集合A中的至少N(N&gt;0)个实体有关系。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>ER图</tag>
      </tags>
  </entry>
  <entry>
    <title>Python虚拟环境与环境依赖</title>
    <url>/2020/06/29/Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E7%8E%AF%E5%A2%83%E4%BE%9D%E8%B5%96/</url>
    <content><![CDATA[<h1 id="随迟但到，简单的python虚拟环境已经依赖包打包"><a href="#随迟但到，简单的python虚拟环境已经依赖包打包" class="headerlink" title="随迟但到，简单的python虚拟环境已经依赖包打包"></a>随迟但到，简单的python虚拟环境已经依赖包打包</h1><blockquote>
<p>其实这个东西应该一开始就写下来，但是一直觉得没啥用，知道昨天队友跟我要后端文件进行测试，结果有个module就是安装不了，一直报错，我就推荐队友安装虚拟环境，并且直接安装我的requirement.txt.</p>
</blockquote>
<p>1.安装虚拟环境：<br>强烈推荐直接按装python3，如果有特殊需求再安装python2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudp python3 install virtualenv</span><br></pre></td></tr></table></figure>

<p>2.创见虚拟环境：<br>这个具体位置见仁见智，一般会和你的工程在一个目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">virtualenv venv</span><br></pre></td></tr></table></figure>
<p>venv是虚拟环境的名字，你可以自己定义。运行之后，会在你的当前目录创建一个名为venv的文件夹</p>
<p>3.启动虚拟环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source venv&#x2F;bin&#x2F;activate</span><br></pre></td></tr></table></figure>
<p>启动之后，你的终端命令行前面会有个“(venv)”</p>
<p>4.关闭虚拟环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">venv deactivate</span><br></pre></td></tr></table></figure>

<p>打包依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>
<p>之后会生成当前python环境左右的依赖包。</p>
<p>安装依赖环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<p>还有一个结构树，我们一般会看见readme里会有整个工程的主要结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install tree</span><br><span class="line">$tree -L 1</span><br></pre></td></tr></table></figure>
<p>-L 1只显示以及目录，具体可以用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tree help</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>session,cache or cookie?</title>
    <url>/2020/06/16/session-cache-or-cookie/</url>
    <content><![CDATA[<h1 id="用户登录的浅显初识"><a href="#用户登录的浅显初识" class="headerlink" title="用户登录的浅显初识"></a>用户登录的浅显初识</h1><blockquote>
<p>题目已经点破了今天的主题，在于用户登录信息的存储。我们在登录一些网站的时候，会遇见这样的情况，明明已经关闭了，一会儿再打开的以后发现已经不需要登录了，自动显示你之前的登录信息。这就是今天要说的情况。</p>
</blockquote>
<p>让用户频繁的登录不是一个让人舒服的设定，尤其是用户关掉browser之后突然想起还有件事忘了，再打开却发现登录失效了，这是一个非常没有必要的事情，尤其是一些购物网站，用户会频繁的登录，那么记录登录用户的信息，使得输入用户名密码这件事情大大的减少会提高浏览的流畅度，避免浪费时间在登录上。</p>
<p>9900的项目要做一个读书的推荐交流平台，那么这种保持用户登录状态的设定是必不可少的。由于本人也没啥开发经验，也就之前学习计算机网络的时候接触了一些cookie，但是还被老师警告⚠️cookie并不安全……所以google大法好……</p>
<p>好了，经过一段时间的google已经查阅Django官方文档，发现目前也就三种方法来实现用户持续登录。session，cache and cookie。</p>
<h2 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h2><p>先来聊聊cache吧，缓存，其实都不陌生，保存在本地的缓存中，这个应该是三种中最快的了。其实在大多数的I/O操作中，缓存都是必不可少的，而且速度都非常的可观。用户发送请求后，服务器将返回请求的信息，同时也将开辟一个缓存空间，将已经返回的信息存储在缓存中，如果有相同的请求操作，那么将直接从缓存中读取数据，而不再从服务器中请求数据，节省了从服务器返回的时间。cahce的周期一般等同于该程序的周期，程序结束进程，那么缓存将被清除，程序重新建立，那么缓存也将重新建立实体。</p>
<p>cache会占用大量的内存，缓存嘛……如果空间存满了，新的信息是无法进入的。所以要提前预估好信息的大小。</p>
<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>这个词应该算是这仨中比较有名的了，你的浏览器的历史信息之类的都跟cookie有关系，而一些游客，未登录的访客信息等都是通过cookie在存储的。一般你第一次访问一些网站，例如amazon，它会自动给你生成一个cookie，你下次再访问的时候就会使用这个cookie_id。cookie中一般存储一些不太敏感的信息，声=生命周期也是可以修改的，一般是浏览器关闭，cookie结束。cookie会以明文的形式存储在客户端。</p>
<h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>session，会话。虽然我觉得这个翻译怪怪的，不是很信达雅，非常暴力的直接翻译。就当作专业名词吧。session被使用的频率应该是最高的了，session的信息会被存储在服务器的内存中，与整个会话周期有关，嗯，就理解为访问过程吧。信息不会被主动丢弃，哪怕存储空间超过了设定，也不会主动丢弃数据。也不会被序列化。</p>
<p>先说到这吧，后续会补充的……</p>
<h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><p>6.24的补充–<br>其实早就该写了，拖到现在……<br>token这个东西现在用的非常多，主要就是这个玩意不怎么占地方，就是一串字符，每次后端接受信息的时候，就会作出验证，又没这个字符串，是不是这个用户的，有那就返回想要的数据。token的存在时间理论上也是一个会话的时间，会话结束就自动销毁，再加上一般把token放在header里，也挺安全的。那么长的无序字符串，数字加字母的组合还是停靠谱的。token的大力推行还是离不开移动端的大力发展。目前也就这么多了解了，以后再补上吧。</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo menu配置的天坑</title>
    <url>/2020/06/11/hexo-menu%E9%85%8D%E7%BD%AE%E7%9A%84%E5%A4%A9%E5%9D%91/</url>
    <content><![CDATA[<h1 id="hexo-next的天坑"><a href="#hexo-next的天坑" class="headerlink" title="hexo next的天坑"></a>hexo next的天坑</h1><p>成功搭建了blog，其实很多细节并没有完善，想到一出就改一出，正好今天添加了一个 live2d小姐姐～～<br>然后我就试了试其他功能，突然发现主页、分类、标签之类的返回一个空白页。<br>这就很蛋疼了，之前因为文章少，也就没在意，这下问题可就得必须解决了。<br>先在本地试了试，运行hexo server之后，点击主页，会返回一个白页，并有一行文字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cannot GET &#x2F;archives&#x2F;%20&#x2F;</span><br></pre></td></tr></table></figure>
<p>主页有，分类有，标签也有，menn栏所有的按钮点完之后都会这样。<br>遇事不决就google，谷歌之后发现似乎有很多答案啊，一个一个看进去，却卵用没有。<br>都是让人 hexo new page 的。但是现在hexo得搭建攻略这么完善，谁会忘记这个？<br>还有人说修改主题 _config.yml 里面menu的注释符号的…………全TM是复制粘贴的混子，卵用没有。<br>还好英文搜索总算有点用，下面就说一下这个问题。</p>
<p>报错信息中的 /%20/ 是指的空格的意思，具体就是menu配置中“||”与前一个变量之间不能有空格，删掉就行了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 解决前 --&gt;</span><br><span class="line">menu:</span><br><span class="line">  home: &#x2F; || home</span><br><span class="line">  about: &#x2F;about&#x2F; || user</span><br><span class="line">  tags: &#x2F;tags&#x2F; || tags</span><br><span class="line">  categories: &#x2F;categories&#x2F; || th</span><br><span class="line"></span><br><span class="line">&lt;!-- 解决后 --&gt;</span><br><span class="line">menu:</span><br><span class="line">  home: &#x2F;|| home</span><br><span class="line">  about: &#x2F;about&#x2F;|| user</span><br><span class="line">  tags: &#x2F;tags&#x2F;|| tags</span><br><span class="line">  categories: &#x2F;categories&#x2F;|| th</span><br></pre></td></tr></table></figure>
<p>就是删掉空格就行，中文搜索一堆废物垃圾结果…………</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>吐槽</tag>
      </tags>
  </entry>
  <entry>
    <title>user_based推荐系统</title>
    <url>/2020/06/10/user-based%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="User-based-协同过滤推荐系统。"><a href="#User-based-协同过滤推荐系统。" class="headerlink" title="User based 协同过滤推荐系统。"></a>User based 协同过滤推荐系统。</h1><p><em>前言</em>:project需要做一个图书推荐系统，刚开始没啥头绪吧，顺阳大佬给我推荐了user_based CF,google一下看了看，里面门道还是挺多的，非常值得抽时间研究一下，写个blog顺便总结归纳一下吧。</p>
<p>基本参考了这位大佬的简书，链接如下：<a href="https://www.jianshu.com/p/cc9191418570" target="_blank" rel="noopener">https://www.jianshu.com/p/cc9191418570</a></p>
<h2 id="协同过滤的大概思路"><a href="#协同过滤的大概思路" class="headerlink" title="协同过滤的大概思路"></a>协同过滤的大概思路</h2><p>其实有点像最邻近算法，当然了也是要根据用户本身的数据来进行推算的。就像读网文小说，最近特别喜欢修仙类的网文，那么你去问别人的时候也会问修仙类的小说有啥新作品嘛？<br>那么问题来了，你怎么知道你问的那个人舅喜欢修仙小说呢？<br>能不能将你认识的喜欢网文的人喜欢的类别统计出来呢？</p>
<h2 id="协同过滤的主要步骤"><a href="#协同过滤的主要步骤" class="headerlink" title="协同过滤的主要步骤"></a>协同过滤的主要步骤</h2><p>1.收集用户的喜好<br>2.找到相似的用户<br>3.计算并推荐</p>
<h2 id="协同过滤算法应用"><a href="#协同过滤算法应用" class="headerlink" title="协同过滤算法应用"></a>协同过滤算法应用</h2><p>实现流程分析：<br><strong>step1:计算用户相似度</strong><br>这里就有不同分支了，用余弦相似度或者皮尔森相关系数（Pearson correlation coefficient）。<br>皮尔森系数的公式：<br><img src="/images/Pearson.png" alt="alt"></p>
<p>p的取值在[-1,1]之间，随着数字的变化相关性也随之改变。等于0则表示无线性相关，大于0则是正相关，小于0则是负相关。</p>
<p>下面就是代码实现皮尔森系数了<br><em>code</em>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sum_xy &#x3D; 0</span><br><span class="line">sum_x&#x3D;0</span><br><span class="line">sum_y&#x3D;0</span><br><span class="line">sum_xx&#x3D;0</span><br><span class="line">sum_yy&#x3D;0</span><br><span class="line">n&#x3D;0</span><br><span class="line">for (x,y) in some_condition:</span><br><span class="line">    n+&#x3D;1</span><br><span class="line">    sum_xy+&#x3D;x*y</span><br><span class="line">    sum_x+&#x3D;x</span><br><span class="line">    sum_y+&#x3D;y</span><br><span class="line">    sum_xx+&#x3D;pow(x,2)</span><br><span class="line">    sum_yy+&#x3D;pow(y,2)</span><br><span class="line">if(n&#x3D;&#x3D;0):</span><br><span class="line">    return 0</span><br><span class="line"></span><br><span class="line">&lt;!-- 皮尔森相关系数的公式 --&gt;</span><br><span class="line">denominator&#x3D;sqrt(sum_xx - pow(sum_x)&#x2F;n) * sqrt(sum_yy-pow(sum_y)&#x2F;n)</span><br><span class="line">if denominator &#x3D;&#x3D;0:</span><br><span class="line">    return 0</span><br><span class="line">else:</span><br><span class="line">    numerator&#x3D;sum_xy-(sum_x * sum_y)&#x2F;n</span><br><span class="line">    return numerator &#x2F; denominator</span><br></pre></td></tr></table></figure>

<p>以下为实例的完整代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pdb</span><br><span class="line">import csv</span><br><span class="line">from math import sqrt</span><br><span class="line"></span><br><span class="line">rows &#x3D; []</span><br><span class="line">csvFile &#x3D; open(&#39;user_book.csv&#39;, &#39;r&#39;)</span><br><span class="line">reader &#x3D; csv.reader(csvFile)</span><br><span class="line">for row in reader:</span><br><span class="line">     rows.append(row)</span><br><span class="line">rows.remove(rows[0]) #remove 1st row</span><br><span class="line">print(&quot;rows:\n%s\n&quot; % rows)</span><br><span class="line">csvFile.close()</span><br><span class="line"></span><br><span class="line">users &#x3D; &#123;&#125;</span><br><span class="line">for row in rows:</span><br><span class="line">     if row[0] not in users:        </span><br><span class="line">          users[row[0]] &#x3D; &#123;&#125;</span><br><span class="line">     users[row[0]][row[2]] &#x3D; float(row[1])</span><br><span class="line">print(&quot;users:\n%s\n&quot; % users)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class recommender:</span><br><span class="line">    #k：the nearest k neighbors</span><br><span class="line">    #cnt：recommend count</span><br><span class="line">    def __init__(self, dataset, k&#x3D;3, cnt&#x3D;2):</span><br><span class="line">        self.k &#x3D; k</span><br><span class="line">        self.cnt &#x3D; cnt</span><br><span class="line">        if type(dataset).__name__ &#x3D;&#x3D; &#39;dict&#39;:</span><br><span class="line">            self.dataset &#x3D; dataset</span><br><span class="line"></span><br><span class="line">    # pearson correlation coefficient</span><br><span class="line">    def pearson(self, touser, dataset):</span><br><span class="line">        sum_xy &#x3D; 0</span><br><span class="line">        sum_x &#x3D; 0</span><br><span class="line">        sum_y &#x3D; 0</span><br><span class="line">        sum_xx &#x3D; 0</span><br><span class="line">        sum_yy &#x3D; 0</span><br><span class="line">        n &#x3D; 0</span><br><span class="line">        for key in touser:</span><br><span class="line">            if key in dataset:</span><br><span class="line">                n +&#x3D; 1</span><br><span class="line">                x &#x3D; touser[key]</span><br><span class="line">                y &#x3D; dataset[key]</span><br><span class="line">                sum_x +&#x3D; x</span><br><span class="line">                sum_y +&#x3D; y</span><br><span class="line">                sum_xy +&#x3D; x * y</span><br><span class="line">                sum_xx +&#x3D; pow(x, 2)</span><br><span class="line">                sum_yy +&#x3D; pow(y, 2)</span><br><span class="line">        if n &#x3D;&#x3D; 0:</span><br><span class="line">            return 0</span><br><span class="line">        </span><br><span class="line">        denominator &#x3D; sqrt(sum_xx - pow(sum_x, 2) &#x2F; n)  * sqrt(sum_yy - pow(sum_y, 2) &#x2F; n)</span><br><span class="line">        if denominator &#x3D;&#x3D; 0:</span><br><span class="line">            return 0</span><br><span class="line">        else:</span><br><span class="line">            numerator &#x3D; sum_xy - (sum_x * sum_y) &#x2F; n</span><br><span class="line">            return numerator &#x2F; denominator</span><br><span class="line"></span><br><span class="line">    def neighbors(self, username):</span><br><span class="line">        distances &#x3D; []</span><br><span class="line">        for key in self.dataset:</span><br><span class="line">            if key !&#x3D; username:</span><br><span class="line">                distance &#x3D; self.pearson(self.dataset[username],self.dataset[key])</span><br><span class="line">                distances.append((key, distance))</span><br><span class="line"></span><br><span class="line">        distances.sort(key&#x3D;lambda artistTuple: artistTuple[1],reverse&#x3D;True)</span><br><span class="line">        return distances</span><br><span class="line">    def recommend_to_user(self, user):</span><br><span class="line">        # store recommended bookid and weight</span><br><span class="line">        recommendations &#x3D; &#123;&#125;</span><br><span class="line">        neighborlist &#x3D; self.neighbors(user)</span><br><span class="line">        user_dict &#x3D; self.dataset[user]</span><br><span class="line">        </span><br><span class="line">        totalDistance &#x3D; 0.0</span><br><span class="line">        </span><br><span class="line">        # total distance of the nearest k neighbors</span><br><span class="line">        for i in range(self.k):</span><br><span class="line">            totalDistance +&#x3D; neighborlist[i][1]</span><br><span class="line">        if totalDistance&#x3D;&#x3D;0.0:</span><br><span class="line">            totalDistance&#x3D;1.0</span><br><span class="line"> </span><br><span class="line">        #recommend books to to_user who never read</span><br><span class="line">        for i in range(self.k):</span><br><span class="line">            weight &#x3D; neighborlist[i][1] &#x2F; totalDistance</span><br><span class="line">            </span><br><span class="line">            neighbor_name &#x3D; neighborlist[i][0]</span><br><span class="line">            #book and score of user i</span><br><span class="line">            neighbor_books &#x3D; self.dataset[neighbor_name]</span><br><span class="line">            for bookid in neighbor_books:</span><br><span class="line">                if not bookid in user_dict:</span><br><span class="line">                    if bookid not in recommendations:</span><br><span class="line">                        recommendations[bookid] &#x3D; neighbor_books[bookid] * weight</span><br><span class="line">                    else:</span><br><span class="line">                        recommendations[bookid] +&#x3D; neighbor_books[bookid] * weight</span><br><span class="line">                        </span><br><span class="line">        # convert dict to list</span><br><span class="line">        print(&quot;recomend bookid and score weight:\n%s\n&quot; % recommendations)</span><br><span class="line">        recommendations &#x3D; list(recommendations.items())</span><br><span class="line">        </span><br><span class="line">        # sort descending</span><br><span class="line">        recommendations.sort(key&#x3D;lambda artistTuple: artistTuple[1], reverse &#x3D; True)</span><br><span class="line"></span><br><span class="line">        return recommendations[:self.cnt]</span><br><span class="line"></span><br><span class="line">def recommend_bookid_to_user(username):</span><br><span class="line">    bookid_list &#x3D; []</span><br><span class="line">    r &#x3D; recommender(users)</span><br><span class="line">    bookid_and_weight_list &#x3D; r.recommend_to_user(username)</span><br><span class="line">    print (&quot;Recommend bookid and weight:&quot;,bookid_and_weight_list)</span><br><span class="line">    for i in range(len(bookid_and_weight_list)):</span><br><span class="line">        bookid_list.append(bookid_and_weight_list[i][0])</span><br><span class="line">    print (&quot;Recommended bookid: &quot;, bookid_list)</span><br><span class="line">        </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">   recommend_bookid_to_user(&quot;Li Si&quot;)rec</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>协同过滤</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>相似度算法</title>
    <url>/2020/06/13/%E7%9B%B8%E4%BC%BC%E5%BA%A6%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="相似度算法（similarity-algorithm）"><a href="#相似度算法（similarity-algorithm）" class="headerlink" title="相似度算法（similarity algorithm）"></a>相似度算法（similarity algorithm）</h1><blockquote>
<p>前言：前两日为了9900特意搜了搜推荐系统，着重看的是user-base-cf，当时不是很理解，就随便了看了，什么余弦，什么皮尔森。后来又仔细看了看，因为想选个简单的，当时以为，余弦和皮尔森是不同的两种相似度方法，当然了，这话也没错，只不过现在看来不太准确。</p>
</blockquote>
<h2 id="余弦算法"><a href="#余弦算法" class="headerlink" title="余弦算法"></a>余弦算法</h2><p>cosine，这玩意从初中开始就伴随着我们，鉴于当时的理解，也就是非常片面的理解为一个夹角而已，高中好像根据cosine教了些别的，不过都忘了……</p>
<p>余弦算法，其实理解起来也很简单。就是直观上的看两个向量的余弦夹角来判断他们的相似性。</p>
<p><img src="/images/consine_p.jpg" alt="alt"></p>
<p>公式如下：<br><img src="/images/consine_formula.jpg" alt="alt"></p>
<p>但是问题来就来了，两个向量或许consine夹角比较小，他们的向量长度却差的很多，余弦相似度却无法判断这种情况。例如，有两个用户，A与B，有两本书，A与B对两本书的评分分别是（1，2），（4，5）。可以看出，他俩都对两本书有过评分，但是评分的差距却很大，这种情况下，余弦相似度是无法将这种信息准确的表达出来的。而且，余弦相似无法在维度缺失的情况下进行计算，必须要求两个向量维度相同，如果A(1,2,4,B(4,5,NULL), 这种情况下余弦是没有办法进行计算的。</p>
<h2 id="皮尔森相关系数（Pearson-Correlation-Coefficient）"><a href="#皮尔森相关系数（Pearson-Correlation-Coefficient）" class="headerlink" title="皮尔森相关系数（Pearson Correlation Coefficient）"></a>皮尔森相关系数（Pearson Correlation Coefficient）</h2><p>皮尔森相关系数就是余弦相似度在维度缺失的情况下的一种改进。</p>
<p>公式在推荐系统那张。</p>
<p>简而言之，皮尔森系数会在计算前进行中心化计算。就是在计算前，把null都填充成0，然后让所有其他的维度减去这个向量各维度的平均值。但是也没有摆脱计算余弦夹角的范畴。</p>
<p>今天就先扯到这吧，其实理解上还是有些偏差的，等后面理解深了再来做修正补充吧。</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>推荐系统</category>
      </categories>
      <tags>
        <tag>相似度</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer</title>
    <url>/2020/06/07/%E5%89%91%E6%8C%87offer/</url>
    <content><![CDATA[<h1 id="剑指-offer"><a href="#剑指-offer" class="headerlink" title="剑指 offer"></a>剑指 offer</h1><p><em>前言</em></p>
<blockquote>
<p>&emsp; 之前零零碎碎做过一些题，但是没有系统的整理过，通过这个 blog，系统的整理并且记录一下吧</p>
</blockquote>
<h2 id="二叉树镜像"><a href="#二叉树镜像" class="headerlink" title="二叉树镜像"></a>二叉树镜像</h2><ul>
<li>难度：简单<br>描述 ：操作给定的二叉树，将其变换为源二叉树的镜像。<br>二叉树的镜像定义：<br>源二叉树：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    8</span><br><span class="line">   &#x2F;  \</span><br><span class="line">  6   10</span><br><span class="line"> &#x2F; \  &#x2F; \</span><br><span class="line">5  7 9 11</span><br></pre></td></tr></table></figure>

<p>镜像二叉树：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    8</span><br><span class="line">   &#x2F;  \</span><br><span class="line">  10   6</span><br><span class="line"> &#x2F; \  &#x2F; \</span><br><span class="line">11 9 7  5</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode right = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">solution</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(root.left!=<span class="keyword">null</span> &amp;&amp; root.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  TreeNode tempnode=root.left;</span><br><span class="line">  root.left=root.right;</span><br><span class="line">  root.right=tempnode;</span><br><span class="line">  <span class="keyword">if</span>(root.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">   Mirror(root.left);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(root.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">   Mirror(root.right);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路：简单的一道题，首先判断一下 root 是否为空，root 的左右子节点是否为空，为空就直接返回。接下来就是经典的值的交换，用一个 tempnode 来转接，之后在判断左右节点，如果有就递归，将左节点或右节点传入。</p>
<h2 id="扑克牌顺子"><a href="#扑克牌顺子" class="headerlink" title="扑克牌顺子"></a>扑克牌顺子</h2><p>题目：LL 今天心情特别好,因为他去买了一副扑克牌,发现里面居然有 2 个大王,2 个小王(一副牌原本是 54 张^_^)…他随机从中抽出了 5 张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心 A,黑桃 3,小王,大王,方片 5”,“Oh My God!”不是顺子…..LL 不高兴了,他想了想,决定大\小 王可以看成任何数字,并且 A 看作 1,J 为 11,Q 为 12,K 为 13。上面的 5 张牌就可以变成“1,2,3,4,5”(大小王分别看作 2 和 4),“So Lucky!”。LL 决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过程,然后告诉我们 LL 的运气如何， 如果牌能组成顺子就输出 true，否则就输出 false。为了方便起见,你可以认为大小王是 0。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span>  <span class="title">isCountinues</span><span class="params">(<span class="keyword">int</span> [] numbers)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> Cardzero=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> Carddiff=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> length=numbers.lenght;</span><br><span class="line">  <span class="keyword">if</span>(length==<span class="number">0</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length-<span class="number">1</span>;i++&gt;)&#123;</span><br><span class="line">   <span class="keyword">if</span>(numbers[i]==<span class="number">0</span>)&#123;</span><br><span class="line">    Cardsero+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(numbers[i]==numbers[i+<span class="number">1</span>])&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   Carddiff+=numbers[i+<span class="number">1</span>]-numbers[i]-<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(Cardzero&gt;=Cardiff)&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路分析： （1）首先就是排序，这里是调用的 Arrays,可以直接用 sort 来排序<br>（2）查看大小王数量，也即是 0 的数量<br>（3）统计五张牌里有没有对子，一旦有重复的牌，就不可能是顺子里<br>（4）统计五张牌得差值，顺子因该是五张连续的牌，最大值和最小值之间<br>的差不能大于 5. 这里关于差值的思路是这样的，连续的牌认为没有差值，因为大小王可以当作任何牌，所以非 0 的牌两张相隔的牌可以差大于 1，因为 0 可以代替中间缺的那张。<br>例如：{0,1,2,4,5},0 可以代替 3。</p>
<h2 id="数组中重复的数字"><a href="#数组中重复的数字" class="headerlink" title="数组中重复的数字"></a>数组中重复的数字</h2><p><em>题目</em>:<br>&emsp;在一个长度为 n 的数组里的所有数字都在 0 到 n-1 的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为 7 的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字 2。</p>
<p><em>代码</em>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Solution&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">duplicate</span><span class="params">(<span class="keyword">int</span> [] numbers, <span class="keyword">int</span> length, <span class="keyword">int</span> duplication [])</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(numbers==<span class="keyword">null</span> || length&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++&gt;)&#123;</span><br><span class="line">   <span class="keyword">if</span>(numbers[i]&lt;<span class="number">0</span> || numbers[i]&gt;length-<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> [] hash= <span class="keyword">new</span> <span class="keyword">int</span>[lenght];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++&gt;)&#123;</span><br><span class="line">   <span class="keyword">if</span>(hash[numbers[i]]==<span class="keyword">true</span>)&#123;</span><br><span class="line">    duplication[<span class="number">0</span>]=i;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   hash[numebrs[i]]=<span class="keyword">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>思路</em>:<br>前面先判断 input 的数据，其中重要的是 numbers 里的数字不能大于 lenght，否则 hash array 会 out of index！一定要注意。因为这个 hash array 是我们判断的重要依据。我在 9101 中写的思路是这样的，建 hash 的时候先找到 array 中的最大值，用最大值来建立 array，这也就不会 out of index 了。而这个步骤的时间复杂度是 $O(n)$。<br>接下来就是查找这个 hash 表了，一般我们都会默认为 false，找到一次改为 true，如果在遍历的过程中，访问到了 true 的变量，我们就得到了结果。根据代码，我们的 key 值也就是 i，把 i 赋值给 duplicaiton 就可以了。查表过程的时间复杂度也是 $O(n)$。<br>hash 的好处就是时间复杂度一般都很理想，但是鱼与熊掌不可兼得，建表的空间复杂的就花费的多一些，还有一些更复杂的 hash table，可以存更多更复杂的数据类型，但是空间占用就更大了。找到数组中不重复的第一个数字也是同理，不多赘述了。</p>
<h2 id="数组中的逆序对"><a href="#数组中的逆序对" class="headerlink" title="数组中的逆序对"></a>数组中的逆序对</h2><p><em>题目</em>:<br>&emsp;在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数 P。并将 P 对 1000000007 取模的结果输出。 即输出 P%1000000007。</p>
<p><em>代码</em>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> [] arr, <span class="keyword">int</span> p,<span class="keyword">int</span> q,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> [] copy=<span class="keyword">new</span> <span class="keyword">int</span>[arr.length]</span><br><span class="line">  <span class="keyword">int</span> i=p;</span><br><span class="line">  <span class="keyword">int</span> j=q+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i&lt;=q &amp;&amp; j&lt;=r)&#123;</span><br><span class="line">   <span class="keyword">if</span>(arr[i]&gt;arr[j])&#123;</span><br><span class="line">    copy[k++]=arr[j++]</span><br><span class="line">    count+=q+<span class="number">1</span>-i;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    copy[k++]=arr[i++]</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(i&lt;=q)&#123;</span><br><span class="line">   copy[k++]=arr[i++]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(j&lt;=r)&#123;</span><br><span class="line">   copy[k++]=arr[j++]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> e=<span class="number">0</span>;e&lt;copy.length;e++)&#123;</span><br><span class="line">   arr[p+e]=copy[e];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Merge-sort(<span class="keyword">int</span> [] array,<span class="keyword">int</span> p,<span class="keyword">int</span> r)&#123;</span><br><span class="line">  q=(p+r)/<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span>(p&lt;r)&#123;</span><br><span class="line">   Merge-sort(array,p,q);</span><br><span class="line">   Merge-sort(array,q+<span class="number">1</span>,r);</span><br><span class="line">   Merge(array,p,q,r);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">InversePairs</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> r = array.length;</span><br><span class="line">  count=<span class="number">0</span>;</span><br><span class="line">  Merge-sort(array,p,r);</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>_分析_：从代码可以看出来，基本这就是个分治的归并排序算法，除了统计次数之外。没啥两样。这道题也是基于归并排序中的比较大小而来的。在数组重拍的时候，会比较连个数字的大小，并决定排列顺序。我们假设现在数组排序到最后一轮，总长为 8，那么 i 从 0-3，j 从 4-7，一次比较。如果 $arr[i]&lt;arr[j]$, 我们假设此时 i=0，j=4,那么在 arr[j]之前的所有数都大于 arr[j],因为前半部分也是排序之后的，index 1-3 都会比 0 大。这样我们就有了 4 对逆序对。以此类推就可以求出全部的了。</p>
<h1 id="数字在排序数组中出现的次数"><a href="#数字在排序数组中出现的次数" class="headerlink" title="数字在排序数组中出现的次数"></a>数字在排序数组中出现的次数</h1><p><em>题目</em>:<br>&emsp;统计一个数字在排序数组中出现的次数。关键词为<em>排序数字</em>。</p>
<p><em>代码</em>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sulotion</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">GetFirstIndex</span><span class="params">(<span class="keyword">int</span> [] arr,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> end=arr.length-<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> mid=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(s&lt;=end)&#123;</span><br><span class="line">   mid=(s+end)/<span class="number">2</span></span><br><span class="line">   <span class="keyword">if</span>(arr[mid]==k)&#123;</span><br><span class="line">    <span class="keyword">if</span>(mid&gt;<span class="number">2</span> &amp;&amp; arr[mid-<span class="number">1</span>]!=k || mid=<span class="number">0</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     end=mid-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   &#125;elif(arr[mid]&gt;k)&#123;</span><br><span class="line">    end=mid-<span class="number">1</span>;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    s=mid+<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">GetLastIndex</span><span class="params">(<span class="keyword">int</span> [] arr,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> end=arr.length-<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> mid=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(s&lt;=end)&#123;</span><br><span class="line">   <span class="keyword">if</span>(arr[mid]==k)&#123;</span><br><span class="line">    <span class="keyword">if</span>(mid&gt;<span class="number">0</span> &amp;&amp; arr[mid+<span class="number">1</span>]!=k || mid=<span class="number">0</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     s=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   &#125;elif(arr[mid]&gt;k)&#123;</span><br><span class="line">    end=mid-<span class="number">1</span>;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    s=mid+<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetNumberOfK</span><span class="params">(<span class="keyword">int</span> [] array , <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> first= GetFirstIndex(array,k);</span><br><span class="line">  <span class="keyword">int</span> last= GetLastIndex(array,k);</span><br><span class="line">  <span class="keyword">return</span> last-first+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>思路</em>:用二分搜索分别向左向右搜索，找到第一次出现的 index 和最后一次出现的 index，难点主要在 arr[mid]=k 的判断上，因为该数组可能有多个 k 值，这个次等于的可能只是中间的 k 值，mid-1 和 mid+1 也有可能是 k，所以在判断是要看看，mid-1 和 mid+1 的值是否是 k。</p>
<h2 id="把二叉树打印成多行"><a href="#把二叉树打印成多行" class="headerlink" title="把二叉树打印成多行"></a>把二叉树打印成多行</h2><p><em>题目</em>:从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。<br><em>代码</em>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val = 0;</span></span><br><span class="line"><span class="comment">    TreeNode left = null;</span></span><br><span class="line"><span class="comment">    TreeNode right = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt; &gt; Print(TreeNode pRoot) &#123;</span><br><span class="line">  &lt;!-- 保存所有的层数 --&gt;</span><br><span class="line">  ArrayList arraylists = <span class="keyword">new</span> ArrayList();</span><br><span class="line">  <span class="keyword">if</span>(pRoot==<span class="keyword">null</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;!-- 保存每一层的节点 --&gt;</span><br><span class="line">  ArrayList arraylist = <span class="keyword">new</span> ArrayList();</span><br><span class="line">  &lt;!-- 利用start和end来控制每层的循环次数，end为下一层的数量，start每层结束后会清<span class="number">0</span> --&gt;</span><br><span class="line">  <span class="keyword">int</span> start=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> end = <span class="number">1</span>;</span><br><span class="line">  Queue quueue = <span class="keyword">new</span> Linkedlist();</span><br><span class="line">  queue.add(pRoot);</span><br><span class="line">  <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">   TreeNode temp=queue.remove();</span><br><span class="line">   arraylist.append(temp.val);</span><br><span class="line">   start++;</span><br><span class="line">   <span class="keyword">if</span>(temp.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    queue.add(temp.left)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(temp.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    queue.add(temp.right)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(start==end)&#123;</span><br><span class="line">    end=queue.size();</span><br><span class="line">    start=<span class="number">0</span>;</span><br><span class="line">    arraylists.append(arraylist);</span><br><span class="line">    arraylist=<span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arraylists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>思路</em>:这道题相对简单一些吧，不过还是调用了两个结构来辅助。主要就是两个点吧，把这一层的节点都放在一起，并且把这一层节点的下一层按照左右顺序放入 ueue 中，因为 queue 是先进先出，所以也会是正确的左右顺序，以此类推就可以了。大的 arraylist 存的是每一层的，每一层都放在一个小的 arraylist 里面，遍历输出就可以了。对树结构的理解以及各个语言存储容器的理解吧。</p>
<h1 id="二叉树的下一个结点"><a href="#二叉树的下一个结点" class="headerlink" title="二叉树的下一个结点"></a>二叉树的下一个结点</h1><p><em>题目</em>:给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。</p>
<p><em>代码</em>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeLinkNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeLinkNode left = <span class="keyword">null</span>;</span><br><span class="line">    TreeLinkNode right = <span class="keyword">null</span>;</span><br><span class="line">    TreeLinkNode next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    TreeLinkNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeLinkNode <span class="title">GetNext</span><span class="params">(TreeLinkNode pNode)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(pNode==<span class="keyword">null</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(pNode.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">   pNode=pNode.right;</span><br><span class="line">   <span class="keyword">while</span>(pNode.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    pNode=pNode.left;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> pNode;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(pNode.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>(pNode.next.left==pNode)&#123;</span><br><span class="line">    <span class="keyword">return</span> pNode.next;</span><br><span class="line">   &#125;</span><br><span class="line">   pNode=pNode.next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>思路</em>:这道题还真把我难住了，中序遍历很简单，左中右，但是如何判断下一个节点还真让我无处下手。又看了看中序遍历以及后面的讨论，总算是有些头绪了。中序遍历的规则就是优先找左节点，用这个规则反推就差不多了。下面举个栗子！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      A</span><br><span class="line">     &#x2F;  \</span><br><span class="line">    B    E</span><br><span class="line">     \    \</span><br><span class="line">     C    F</span><br><span class="line"> &#x2F;    &#x2F;</span><br><span class="line">D    G</span><br><span class="line">    &#x2F; \</span><br><span class="line">H   K</span><br></pre></td></tr></table></figure>

<p>就像这个图，中序遍历的结果是：BDC A EHGKF. 我们可以发现，如果当前节点有右子节点，那么它的下一个节点就是它右节点的左节点（如果有的话，没有就是右子节点）。例如：B,它的下一个节点就是 D,还有 E,它的下一个子节点就是 H.那么另外一种情况就是没有右子节点，例如 C,F.F 是最后一个节点有点特殊，我们就用 C 来举例。C 的下一个节点是 A，那么就是找到第一个节点并且这个节点是父节点的左子节点。例如：C 节点的下一个节点是 A，父节点是 B，B 的父节点是 A 并且 B 是 A 的左子节点，A 已经是 root 了，所以就是 A 了。<br>代码不长，很短，但是很考验对于树结构的认知以及遍历的顺序关系，我认为考的很细。</p>
<h1 id="链表中环的入口结点"><a href="#链表中环的入口结点" class="headerlink" title="链表中环的入口结点"></a>链表中环的入口结点</h1><p><em>题目</em>:给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出 null。<br><em>代码</em>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&lt;!-- 哈希法 --&gt;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ListNode <span class="title">EntryNodeOfLoop</span><span class="params">(ListNode pHead)</span></span>&#123;</span><br><span class="line">      HashSet&lt;ListNode&gt; set = <span class="keyword">new</span> HashSet&lt;ListNode&gt;();</span><br><span class="line">      <span class="keyword">while</span>(pHead!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!set.add(pHead))&#123;</span><br><span class="line">          <span class="keyword">return</span> pHead;</span><br><span class="line">        &#125;</span><br><span class="line">        pHead=pHead.next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- <span class="number">2</span> --&gt;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">EntryNodeOfLoop</span><span class="params">(ListNode pHead)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ListNode fast = pHead;</span><br><span class="line">        ListNode slow = pHead;</span><br><span class="line">        <span class="keyword">while</span>( fast!=<span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            fast=fast.next.next;</span><br><span class="line">            slow=slow.next;</span><br><span class="line">            <span class="keyword">if</span>(fast == slow)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fast == <span class="keyword">null</span> || fast.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fast=pHead;</span><br><span class="line">        <span class="keyword">while</span>(fast != slow)&#123;</span><br><span class="line">            fast=fast.next;</span><br><span class="line">            slow=slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>思路</em>:<br>翻阅了讨论区，熟悉的哈希又出现了。其实类似于这种判断有没有重复的问题，哈希是个万金油，只要付出点空间代价，时间复杂度上会给一个满意的答案。 1.哈希：<br>思路很简单，建一个 set，然后遍历整个链表，遇到一个就放进去一个，如果没有环，那么访问到最后一个节点都不会有重复的节点被放到 set 里。而一旦有环，那么那个环的关键节点就会被第一个再次遍历到，一旦在添加到 set 里时发现已经存在，那么这个点就是环的入口节点。 2.双指针法：<br>双指针其实用的也很多，什么从前后两头遍历了之类的很常见，但是这个倒是第一次见到，可能是题刷少了。刚开始两个指针都指向 head 节点，然后遍历的时候两个节点一个慢一个快，快的一次两个节点，慢的还是一次一个节点。具体分析还是看牛客的吧，我也是大概了解，觉得真不错，就写在这里了。</p>
<h1 id="和为-S-的两个数字"><a href="#和为-S-的两个数字" class="headerlink" title="和为 S 的两个数字"></a>和为 S 的两个数字</h1><p><em>题目</em>:输入一个递增排序的数组和一个数字 S，在数组中查找两个数，使得他们的和正好是 S，如果有多对数字的和等于 S，输出两个数的乘积最小的。<br><em>代码</em>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">FindNumbersWithSum</span><span class="params">(<span class="keyword">int</span> [] array,<span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">if</span>(array == <span class="keyword">null</span> || array.length&lt;<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j=array.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[i]+array[j]==sum)&#123;</span><br><span class="line">                res.add(array[i]);</span><br><span class="line">                res.add(array[j]);</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>( array[i]+array[j]&lt;sum)&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>思路</em>:最开始看到这道题以及相关的双链表就有了点思路，但是比较蠢，看了评论区之后才修正了自己的想法。双指针前后夹逼，判断两个值的和与 sum 的关系，如果小了，那么前面的指针向后移动，如果大了后面的指针向前移动。还有就是如果遇见多组，输出乘积最小的，但是这种前后夹逼的情况下，遇见的第一组就是乘积最小的，可能这也是题目的漏洞吧。</p>
<h1 id="和为-S-的连续正数序列"><a href="#和为-S-的连续正数序列" class="headerlink" title="和为 S 的连续正数序列"></a>和为 S 的连续正数序列</h1><p><em>题目</em>:<br>小明很喜欢数学,有一天他在做数学作业时,要求计算出 9~16 的和,他马上就写出了正确答案是 100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为 100(至少包括两个数)。没多久,他就得到另一组连续正数和为 100 的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为 S 的连续正数序列? Good Luck!<br><em>代码</em>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt; &gt; FindContinuousSequence(<span class="keyword">int</span> sum) &#123;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> plow=<span class="number">1</span>,phigh=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(phigh&gt;plow)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = (plow+phigh)*(phigh-plow+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(temp==sum)&#123;</span><br><span class="line">                ArrayList&lt;Integer&gt; tt = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=plow;i&lt;=phigh;i++)&#123;</span><br><span class="line">                    tt.add(i);</span><br><span class="line">                &#125;</span><br><span class="line">                res.add(tt);</span><br><span class="line">                plow++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp&lt;sum)&#123;</span><br><span class="line">                phigh++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                plow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>思路</em>:这道题又是用到了双指针，快慢指针。关于终止条件，最终的组合形式就是两个相邻的数的，那么判断之后，plow++，自然就等于 phigh 了，循环终止。例如找到和为 15 的组合。{[1,2,3,4,5],[4,5,6],[7,8]},<br>最后一组 7，8，把他们放到 array 后，整个循环也就结束了。</p>
<h1 id="数组中只出现一次的数字"><a href="#数组中只出现一次的数字" class="headerlink" title="数组中只出现一次的数字"></a>数组中只出现一次的数字</h1><p><em>题目</em>:一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。<br><em>代码</em>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//num1,num2分别为长度为1的数组。传出参数</span></span><br><span class="line"><span class="comment">//将num1[0],num2[0]设置为返回结果</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FindNumsAppearOnce</span><span class="params">(<span class="keyword">int</span> [] array,<span class="keyword">int</span> num1[] , <span class="keyword">int</span> num2[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(array.length==<span class="number">2</span>)&#123;</span><br><span class="line">            num1[<span class="number">0</span>]=array[<span class="number">0</span>];</span><br><span class="line">            num2[<span class="number">0</span>]=array[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        HashSet&lt;Integer&gt; res = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!res.add(array[i]))&#123;</span><br><span class="line">                res.remove(array[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ArrayList&lt;Integer&gt; rr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Integer i:res)&#123;</span><br><span class="line">            rr.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        num1[<span class="number">0</span>]=rr.get(<span class="number">0</span>);</span><br><span class="line">        num2[<span class="number">0</span>]=rr.get(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>思路</em>:Obviously, 又又又是哈希，这道题可以用异或算法，但是我不会……，那么就用空间换时间，哈希 set。在遍历的时候，如果无法再添加进入 hashset，那么就证明元素已经在里面了，那么就直接将这个元素从 hashset 中移除掉，最终在 hashset 里面剩下的就是只出现一次的，但是这里有个蛋疼的地方，hashset 想要准确的获取元素有点麻烦，所以我直接换了个容器，把元素放到 arraylist 里面，再打算用 index 获取对应的元素，这里又凸显出我 java 基础的薄弱了，arraylist 竟然无法直接用 index 获取对应的元素，需要调用 get()方法…………不过最终还是通过了。在看到评论区的时候，我看有人使用 arraylist.container()来判断是否存在，有点像 python 的 in,但是好像不是内置的方法，那就算了吧。</p>
<h1 id="从上往下打印二叉树"><a href="#从上往下打印二叉树" class="headerlink" title="从上往下打印二叉树"></a>从上往下打印二叉树</h1><p><em>题目</em>:从上往下打印出二叉树的每个节点，同层节点从左至右打印。<br><em>代码</em>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val = 0;</span></span><br><span class="line"><span class="comment">    TreeNode left = null;</span></span><br><span class="line"><span class="comment">    TreeNode right = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">PrintFromTopToBottom</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;TreeNode&gt; q = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        q.add(root);</span><br><span class="line">        <span class="keyword">while</span>(q.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            TreeNode temp = q.remove(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(temp.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                q.add(temp.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                q.add(temp.right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(temp.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>思路</em>:不太清楚牛客为啥要出这道题，还把难度设为困难。之前有道题，从左往右打印二叉树的每一层，就跟这道题很像，可能就跟评论区说的一样，限制只能用 ArrayList,不能用 queue。这里就是用 ArrayList 模拟了 queue，queue 的特点就是先进先出，用 remove(0),来先出，然后就是看看有没有左右节点，有就压进去，然后把 val 放到一个 array 里，输出。<br>就是一个二叉树逐层遍历吧。</p>
<h1 id="对称的二叉树"><a href="#对称的二叉树" class="headerlink" title="对称的二叉树"></a>对称的二叉树</h1><p><em>题目</em>:<br>请实现一个函数，用来判断一棵二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。<br><em>代码</em>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val = 0;</span></span><br><span class="line"><span class="comment">    TreeNode left = null;</span></span><br><span class="line"><span class="comment">    TreeNode right = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isSymmetrical</span><span class="params">(TreeNode pRoot)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pRoot==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.offer(pRoot.left);</span><br><span class="line">        q.offer(pRoot.right);</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            TreeNode left=q.poll();</span><br><span class="line">            TreeNode right=q.poll();</span><br><span class="line">            <span class="keyword">if</span>(left==<span class="keyword">null</span> &amp;&amp; right==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(left==<span class="keyword">null</span> || right==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(left.val != right.val)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            q.offer(left.left);</span><br><span class="line">            q.offer(right.right);</span><br><span class="line">            q.offer(left.right);</span><br><span class="line">            q.offer(right.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>思路</em>:这种题目一般都会有递归和非递归两种思路，本人不太喜欢递归，所以代码贴的是非递归的 queue 实现。其实做过了很多二叉树的题目厚，你会发现大同小异，这道题也是逐层判断，相当于从两侧开始向中间两两比较，这里用的是 queue 的 poll 和 offer 方法，这两个方式功能上和 add 还有 remove 一样，但是遇到 null 不会报错，这样我们在下一轮判断的时候就可以利用 null 来终止循环。后来我在品论区看到一个回复，好像在最后一层如中中间又一个单独的节点，就很难判断出来。后来又看了看，这个说法有点问题，在 java 中，null 是会入栈和入队的，限制判断条件的第一个就是判断这种情况，如果都是 null，那就跳过此次循环，不再把元素入队，这也就避免了 null-&gt;null 的无限循环了。</p>
<h1 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h1><p><em>题目</em>:<br>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。<br><em>代码</em>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for binary tree</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">reConstructBinaryTree</span><span class="params">(<span class="keyword">int</span> [] pre,<span class="keyword">int</span> [] in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> rootval = pre[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(pre.length==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(rootval);</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(rootval);</span><br><span class="line">        <span class="keyword">int</span> rootindex=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;in.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(in[i]==rootval)&#123;</span><br><span class="line">                rootindex = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        root.left=reConstructBinaryTree(Arrays.copyOfRange(pre,<span class="number">1</span>,rootindex+<span class="number">1</span>),Arrays.copyOfRange(in,<span class="number">0</span>,rootindex));</span><br><span class="line">        root.right=reConstructBinaryTree(Arrays.copyOfRange(pre,rootindex+<span class="number">1</span>,pre.length),Arrays.copyOfRange(in,rootindex+<span class="number">1</span>,in.length));</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>思路</em>:<br>这道题毫无思路，于是直奔评论区，因为这道题要求用递归，本人递归很菜然后看了很多答案，终于有个答案能够很简单的理解了。其实这道题有点像分治，根据根节点，不断分成左右子树。<br>这道题的主要考点在于前序遍历和中序遍历，前序遍历是根-》左-》右，中序遍历是左-》根-》右。主要就是利用两种遍历的排列顺序，来相互查验。前序遍历的性质决定了，首位元素就是根节点或者说是这个子节点的根节点，而中序遍历可以把一个树很好的分为左右子树。于是，先取得先序遍历的首个元素，把它作为新树的根，然后因为题里给出了所有的 value 都不同的条件，所以我们利用这个条件，确定在中序中根节点的位置，那么 0-rootindex 就是左子树，rootindex+1-in.length 就是右子树。反过来，我们根据获取的左右子树的长度，来把前序遍历进行分离，获得前序遍历的左右子树，然后我们把相对应的前序遍历和中序遍历的左右子树进行递归。这里利用来一个内置函数 Arrays.copyOfrang([],from,to),from-to 是“[)”,来重构一个结构.<br>终止条件是子数组长度为一就可以返回了，长度为一就说明这一分枝上就一个节点。</p>
<h1 id="序列化二叉树"><a href="#序列化二叉树" class="headerlink" title="序列化二叉树"></a>序列化二叉树</h1><p><em>题目</em>:<br>请实现两个函数，分别用来序列化和反序列化二叉树</p>
<p>二叉树的序列化是指：把一棵二叉树按照某种遍历方式的结果以某种格式保存为字符串，从而使得内存中建立起来的二叉树可以持久保存。序列化可以基于先序、中序、后序、层序的二叉树遍历方式来进行修改，序列化的结果是一个字符串，序列化时通过 某种符号表示空节点（#），以 ！ 表示一个结点值的结束（value!）。</p>
<p>二叉树的反序列化是指：根据某种遍历顺序得到的序列化字符串结果 str，重构二叉树。</p>
<p>例如，我们可以把一个只有根节点为 1 的二叉树序列化为”1,”，然后通过自己的函数来解析回这个二叉树<br><em>代码</em>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val = 0;</span></span><br><span class="line"><span class="comment">    TreeNode left = null;</span></span><br><span class="line"><span class="comment">    TreeNode right = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">Serialize</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            sb.append(<span class="string">"#"</span>+<span class="string">","</span>);</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            TreeNode temp=q.poll();</span><br><span class="line">            <span class="keyword">if</span>(temp!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                q.offer(temp.left);</span><br><span class="line">                q.offer(temp.right);</span><br><span class="line">                sb.append(temp.val+<span class="string">","</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sb.append(<span class="string">"#"</span>+<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="function">TreeNode <span class="title">Deserialize</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        TreeNode head = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(str==<span class="keyword">null</span> || str.length()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] nodes=str.split(<span class="string">","</span>);</span><br><span class="line">        TreeNode[] treenode = <span class="keyword">new</span> TreeNode[nodes.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;treenode.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!nodes[i].equals(<span class="string">"#"</span>))&#123;</span><br><span class="line">                treenode[i] = <span class="keyword">new</span> TreeNode(Integer.valueOf(nodes[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">1</span>;j&lt;treenode.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(treenode[i]!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                treenode[i].left=treenode[j++];</span><br><span class="line">                treenode[i].right=treenode[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> treenode[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>思路</em>:<br>其实这道题不难，有些细节我自己没把握，评论区的大神们还是厉害的。这道题我用了自己习惯的层序遍历的方法，之前的题都是用 array 来装，这次直接用 stringbuilder 来，最后别忘了调用 stringbuilder 的内置函数 to.String()来返回 string 结果。反序列化那块就是根前面差不多，就是把 string 转化为 integer 那块的函数不太熟悉。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>code</tag>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>算法合集</title>
    <url>/2020/06/11/%E7%AE%97%E6%B3%95%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<h1 id="算法归纳"><a href="#算法归纳" class="headerlink" title="算法归纳"></a>算法归纳</h1><blockquote>
<p>刷题的时候除了一些字符串或者智力题，大部分都是算法的变种，打算把原生算法和算法题分开，在这单独写一章。</p>
</blockquote>
<h2 id="归并排序-分治"><a href="#归并排序-分治" class="headerlink" title="归并排序-分治"></a>归并排序-分治</h2><p><em>前言</em>:<br>最近一直在接触归并排序的分治算法，于是抽时间好好看了看，顺便总结一下，分治归并的题也非常的多，一举两得啦。</p>
<p><em>代码</em>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">piblic class Merge-sort-algorithm&#123;</span><br><span class="line">	public static void Merge(int [] arr,int p,int q,int r)&#123;</span><br><span class="line">		&#x2F;&#x2F;声明一个临时数组，排序好的会装进去，最后再重写原数组</span><br><span class="line">		int [] copy&#x3D;new int[r-p+1];</span><br><span class="line">		int i&#x3D;p;</span><br><span class="line">		int j&#x3D;q+1;</span><br><span class="line">		int k&#x3D;0;</span><br><span class="line">		while(i&lt;&#x3D;q &amp;&amp; j&lt;&#x3D;r)&#123;</span><br><span class="line">			if(arr[i]&lt;&#x3D;arr[j])&#123;</span><br><span class="line">				&#x2F;&#x2F;大小比较，小的先放进去</span><br><span class="line">				copy[k++]&#x3D;arr[i++]</span><br><span class="line">			&#125;else&#123;</span><br><span class="line">				copy[k++]&#x3D;arr[j++]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;左边剩余的数全都放进去</span><br><span class="line">		while(i&lt;&#x3D;q)&#123;</span><br><span class="line">			copy[k++]&#x3D;arr[i++]</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;&#x2F;右边剩余的数全都放进去</span><br><span class="line">		while(j&lt;&#x3D;r)&#123;</span><br><span class="line">			copy[k++]&#x3D;arr[j++]</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;&#x2F;把原数组重写，注意覆盖原数组的坐标位置是根据起始位置开始的</span><br><span class="line">		for(int e&#x3D;0;e&lt;copy.length;e++)&#123;</span><br><span class="line">			arr[p+e]&#x3D;copy[e]</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	public static void Merge-sort(int [] arr, int p,int r)&#123;</span><br><span class="line">		int q&#x3D;(p+r)&#x2F;2;</span><br><span class="line">		if(p&lt;r)&#123;</span><br><span class="line">			&#x2F;&#x2F;递归调用</span><br><span class="line">			Merge-sort(arr,p,q);</span><br><span class="line">			Merge-sort(arr,q+1,r);</span><br><span class="line">			&#x2F;&#x2F;归并排序元素</span><br><span class="line">			Merge(arr,p,q,r);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	public static void main(args[]String)&#123;</span><br><span class="line">		int [] arr&#x3D;&#123;5,2,4,7,1,3,2,6&#125;;</span><br><span class="line">		Merge-sort(arr,0,arr.length-1);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二分搜索算法"><a href="#二分搜索算法" class="headerlink" title="二分搜索算法"></a>二分搜索算法</h2><p><em>思路</em>:</p>
<blockquote>
<p>二分搜索是一种高效的搜索匹配算法，尤其是针对有序数组，时间复杂度为$O(logn)$。算法的局限性也很明显，需要有序的数组。二分法在算法中是非常常见的，整个过程也都很固定。先根据数组长度，找到mid，然后用目标与mid比较大小，如果比mid大，那么将会搜索mid-array.length这部分的元素。反之，则搜索array[0]-mid的部分。之后重复上述步骤，进行递归。</p>
</blockquote>
<p><em>代码</em>:非递归</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class algorithm&#123;</span><br><span class="line">	public static int Binary-search(int[] arr,int key)&#123;</span><br><span class="line">		int start&#x3D;0;</span><br><span class="line">		int end&#x3D;arr.length;</span><br><span class="line">		int mid;</span><br><span class="line">		while(start&lt;&#x3D;end)&#123;</span><br><span class="line">			mid&#x3D;(start+end)&#x2F;2</span><br><span class="line">			if(key&gt;mid)&#123;</span><br><span class="line">				start&#x3D;mid+1;</span><br><span class="line">			&#125;elif(key&lt;mid)&#123;</span><br><span class="line">				end&#x3D;mid-1;</span><br><span class="line">			&#125;else&#123;</span><br><span class="line">				return mid;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		return -1;</span><br><span class="line">	&#125;</span><br><span class="line">	public stactic void main(args [] String)&#123;</span><br><span class="line">		int [] arr&#x3D;&#123;1,2,3,4,5,6,7,8&#125;;</span><br><span class="line">		int key &#x3D; 7;</span><br><span class="line">		Binary_search(arr,key);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>代码</em>:递归</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class algorithm&#123;</span><br><span class="line">	public static int Binary-search(int[] arr,int key,int start,int end)&#123;</span><br><span class="line">		int mid &#x3D; (start+end)&#x2F;2;</span><br><span class="line">		if(mid&#x3D;&#x3D;key)&#123;</span><br><span class="line">			return mid;</span><br><span class="line">		&#125;</span><br><span class="line">		if(start&gt;&#x3D;end)&#123;</span><br><span class="line">			return -1;</span><br><span class="line">		&#125;elif(mid&gt;key)&#123;</span><br><span class="line">			Binary-search(arr,key,mid+1,end);</span><br><span class="line">		&#125;elif(mid&lt;mid)&#123;</span><br><span class="line">			Binary-search(arr,key,start,mid-1);</span><br><span class="line">		&#125;</span><br><span class="line">		return -1;</span><br><span class="line">	&#125;</span><br><span class="line">	public stactic void main(args [] String)&#123;</span><br><span class="line">		int [] arr&#x3D;&#123;1,2,3,4,5,6,7,8&#125;;</span><br><span class="line">		int key &#x3D; 7;</span><br><span class="line">		int strat&#x3D;0;</span><br><span class="line">		int end&#x3D;arr.length;</span><br><span class="line">		Binary_search(arr,key,start,end);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>感悟</em>:这个算法分为递归和非递归的，非递归的看起来清楚明晰一些吧。然后就是题目了，剑指offer里面就有很多的变种题。就例如找到一个有序数列中的重复的数字。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>浅淡Django外键</title>
    <url>/2020/07/05/%E6%B5%85%E6%B7%A1Django%E5%A4%96%E9%94%AE/</url>
    <content><![CDATA[<h1 id="聊一聊-Django-里面的外键"><a href="#聊一聊-Django-里面的外键" class="headerlink" title="聊一聊 Django 里面的外键"></a>聊一聊 Django 里面的外键</h1><blockquote>
<p>最近在用 Django 做一个后端 api，整个数据库呢不是很大，但是个别表的关系让我头大，尤其是 OneToMany 和 MangToMany，今天就先来聊聊 OneToMany。Django 里面上述关系都在子表中声明。</p>
</blockquote>
<p>一对多的关系我们一般用外键来解释关系，在 Django 里的，就是在子表里面添加 foreign-key，主表不做修改。<br>比如我现在要写一个出版社和书的 model，一个出版社可以出版很多书，一本书一般只能有一个出版社，那么作者与文章就是 OneToMany 的关系。<br>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class Publish(models.Model):</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;128)</span><br><span class="line">    age &#x3D; models.IntegerField()</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line">class Book(models.Model):</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;128)</span><br><span class="line">    publish_date &#x3D; models.DateTimeField(auto_add&#x3D;True)</span><br><span class="line">    publish &#x3D; models.ForeignKey(Publish,on_delete&#x3D;models.CASCADE)</span><br></pre></td></tr></table></figure>

<p>上述两个表呢，出版社是主表，书在这个关系下是子表，子表外键至主表。</p>
<blockquote>
<p>tips: django 的 model 在你不指定主键的时候，会自动生成唯一 ID 作为主键。</p>
</blockquote>
<p>我们通过子表查询信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">book &#x3D; Book.objects.get(id&#x3D;1)</span><br><span class="line">&lt;!-- 查询出版社 --&gt;</span><br><span class="line">publish &#x3D; book.publish</span><br></pre></td></tr></table></figure>

<p>我们通过主表查询信息，也就是反向查询：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Jack &#x3D; Publish.objects.get(id&#x3D;1)</span><br><span class="line">&lt;!-- 我们想查询这个出版社出版过多少书 --&gt;</span><br><span class="line">&lt;!-- 1.不设置relate_name --&gt;</span><br><span class="line">Jack.book_set.all()</span><br><span class="line">&lt;!-- 返回是一个queryset，需要遍历访问 --&gt;</span><br><span class="line">&lt;!-- 如果设置了related_name,例如，related_name&#x3D;&#39;publish_book&#39; --&gt;</span><br><span class="line">Jack.publish_book.all()</span><br><span class="line">&lt;!-- 返回的也是一个queryset，可以简单理解为一个list --&gt;</span><br></pre></td></tr></table></figure>

<p>这就是设置 related_name 的作用，方便主表反向查询，对于子表本身，没什么过多的用处。<br>还有一种就是利用装饰器，但是目前自己对这个方面不太熟悉，就不过多阐述了。</p>
<p>做一个简单的总结： 1.所有的关系，OneToOneField，ForeignKey，ManyToManyField，这些都在子表中声明，主表不动。 2.为了方便主表反向查询，我们一般会在声明关系时，添加 related_name，方便反向查询。 3.反向查询的结果是一个 queryset，可以简单理解为一个 list，需要遍历访问。有时候我们需要判断存不存在，那么就用 exists()，函数就行，如果 queryset 为空，那么就是 false。</p>
<blockquote>
<p>这个只是目前的简单总结，一般都是从简书，CSDN 上东拼西凑的，主要是自己的一个总结，目前来说还是有些不严谨，等后面理解更全面，更深入再来修改吧。也通过这种总结让自己对于 django model 有些更加全面的认识吧。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Django</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>浅淡vue的if和for</title>
    <url>/2020/06/26/%E6%B5%85%E6%B7%A1vue%E7%9A%84if%E5%92%8Cfor/</url>
    <content><![CDATA[<h1 id="简单聊聊vue的if和for"><a href="#简单聊聊vue的if和for" class="headerlink" title="简单聊聊vue的if和for"></a>简单聊聊vue的if和for</h1><blockquote>
<p>详情请访问官方文档，这里只是自己根据自己使用的一点小想法</p>
</blockquote>
<p>因为要把用jquery写的js重构一下，再加上牵扯模板问题，就自然而然的涉及到了vue的if。<br>首先我们就是要面对一个问题，我没检查到数据之前，整个部分不显示，收到结果并且validated之后，才显示结果。这里就可以直接使用v-if来判断。我的建议是把收到的数据放到data()里面，比如放到一个list[]里面，通过‘v-if:list.length&gt;0’来判断有没有。<br>这里vue官方推荐来一种if和for连用的方式，那便是把if判断放到&lt;’template’&gt;里面，使得if和for分开。template在正常显示是可以看作一个div。</p>
<p>下面就是for循环。我们面对一个object时，经常要一次取出一些数据，这就需要for循环了。vue在2.2之后要求必须绑定一个唯一的值作为key。以我目前的理解，一般就绑定index就行，而且index也可以作为数据被单独取出。v-for=’(item,index in items)’，这里index方便我们后续的操作。一般情况下我们就取个数据就完事了，但是有时候我们需要根据数据的数量进行排版，这种情况下index就很关键了，比如我一次循环取两个元素，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div v-for&#x3D;&#39;(item,index in items)&#39; :key&#x3D;&#39;index&#39;&gt;</span><br><span class="line">  &lt;div v-if&#x3D;&#39; index % 2 &#x3D;&#x3D; 0 &#39;&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;items[index]&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;items[index+1]&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>这样就可以一次获取两个元素了，方便排版。</p>
]]></content>
  </entry>
  <entry>
    <title>07-06 山雨欲来风满楼</title>
    <url>/2020/07/06/07-06-%E5%B1%B1%E9%9B%A8%E6%AC%B2%E6%9D%A5%E9%A3%8E%E6%BB%A1%E6%A5%BC/</url>
    <content><![CDATA[<h1 id="山雨欲来风满楼"><a href="#山雨欲来风满楼" class="headerlink" title="山雨欲来风满楼"></a>山雨欲来风满楼</h1><blockquote>
<p>最近有些怠惰来，说好的每天一更也没做到，还好 9900 的项目没有懒散下来，一直在做。</p>
</blockquote>
<p>昨天做了两道题，一道是用前序遍历和中序遍历来重构二叉树，因为自己递归有点菜，还是有些难度的，还有就是这道题提醒了自己对于数据结构的一些基本知识一定要扎实，牢固。<br>第二道题就很有意思了，二叉树的序列化和反序列化，题目本身没前面的题难，知识正巧最精正头疼 django rest 的序列化和反序列化。自己有时候老师分不清到底是要序列化还是要反序列化，还是要多看多练。</p>
<p>然后就是做用户评论的数据库设计，最开始的时候想的太简单了，再加上还要有点赞功能。突然发现，这部分是目前最难的点了，尤其是点赞，由于我们的项目的测试有我们自己进行，所以还可以妥协一下，就用普通的结构就行了，要是真实的项目中，怕是要出问题哦。评论还好说，短时间内不会有很多评论，毕竟要打字嘛，但是点赞就不一样了，轻点一下就行，这就意味着大多数人都是会选择点赞的，而且在一个评论在 post 出现之后，可能短时间内有大量的点赞或者取消赞的操作，这也就是我们通常说的“高并发”，但是自己对与“并发”这块也就只存在于简单的概念理解，实际的操作就没有，我看过一些其他人的思路，大多是采用 redis 来暂时存储某一段时间内的点赞操作，然后 map-reduce，把 map-reduce 的结果再传给数据库，目前在我眼里这已经是高端操作来……<br>不得不说，自己的经验阅历还是太少来。还有就是，到底什么才算是“项目”呢？</p>
<p>然后就是 9101，上周的作业主要是大数算法，卷积还有傅立叶变换。啊，看得我真是头疼，但是好得最后把基本的概念定义之类的看透了，但是一些复杂的还是一窍不通啊。不得不说傅立叶变换真的是太强了，我们现在的图像声音的处理都是基于此。9101ass3 就是贪心算法和动态规划了，哎，也是个难点啊。</p>
<p>秋招转瞬已至，这是最后的机会了，在山雨面前我能否屹立不倒呢？已然感觉在前风面前微微晃动了…………</p>
<blockquote>
<p>工欲善其事，必先利其器</p>
</blockquote>
]]></content>
      <tags>
        <tag>发骚</tag>
      </tags>
  </entry>
</search>
